name: Deploy to Droplet

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Package repo (git archive)
        run: git archive --format=tar.gz -o package.tgz HEAD

      - name: Upload package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TB_HOST }}
          username: ${{ secrets.TB_USER }}
          password: ${{ secrets.TB_PASS }}
          source: "package.tgz"
          target: "/srv/trading-bots-repo"

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TB_HOST }}
          username: ${{ secrets.TB_USER }}
          password: ${{ secrets.TB_PASS }}
          script: |
            set -euo pipefail

            LIVE=/srv/trading-bots
            REPO=/srv/trading-bots-repo
            mkdir -p "$LIVE" "$REPO"

            cd "$REPO"
            tar -xzf package.tgz
            rm -f package.tgz

            # Sync repo -> live (preserve data/logs/.env)
            rsync -a --delete --delete-delay --force \
              --exclude data --exclude logs --exclude .env --exclude _diag/ \
              "$REPO"/ "$LIVE"/

            # Write .env AFTER rsync so --delete won't remove it
            : > "$LIVE/.env"
            printf "BINANCE_API_KEY=%s\n" "${{ secrets.BINANCE_API_KEY }}"   >> "$LIVE/.env"
            printf "BINANCE_API_SECRET=%s\n" "${{ secrets.BINANCE_API_SECRET }}" >> "$LIVE/.env"

            # Build meta for UI banner (/api/meta)
            echo "GIT_BRANCH=${{ github.ref_name }}" >> "$LIVE/.env"
            echo "DEPLOY_TAG=${{ github.ref_name }}" >> "$LIVE/.env"
            echo "GIT_SHA=${{ github.sha }}"         >> "$LIVE/.env"

            # Bring stack down with BOTH files (base + override), then up with BOTH
            BASE="$LIVE/compose/docker-compose.yml"
            OVR="$LIVE/compose/docker-compose.override.yml"

            # Down first (ignore if override is missing)
            if [ -f "$OVR" ]; then
              docker compose -p tb -f "$BASE" -f "$OVR" down --remove-orphans || true
            else
              docker compose -p tb -f "$BASE" down --remove-orphans || true
            fi

            # Up with BOTH so override env (STRAT_PROFILE) wins
            if [ -f "$OVR" ]; then
              docker compose -p tb -f "$BASE" -f "$OVR" up -d --build --remove-orphans
            else
              docker compose -p tb -f "$BASE" up -d --build --remove-orphans
            fi
