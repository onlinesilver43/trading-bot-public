name: Test and Validate

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest pytest-cov black ruff

      - name: Lint with Ruff
        run: |
          ruff check app --output-format=concise

      - name: Format check with Black
        run: |
          black --check app

      - name: Run tests
        run: |
          pytest app/ --cov=app --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  validate:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4

      - name: Validate Docker Compose
        run: |
          # Check if docker-compose files are valid
          if [ -f "compose/docker-compose.yml" ]; then
            echo "Validating docker-compose.yml..."
            docker-compose -f compose/docker-compose.yml config
          fi
          
          if [ -f "compose/docker-compose.override.yml" ]; then
            echo "Validating docker-compose.override.yml..."
            docker-compose -f compose/docker-compose.yml -f compose/docker-compose.override.yml config
          fi

      - name: Validate GitHub Actions
        run: |
          # Check if all workflow files are valid YAML
          for workflow in .github/workflows/*.yml; do
            echo "Validating $workflow..."
            python -c "import yaml; yaml.safe_load(open('$workflow'))"
          done

      - name: Check file structure
        run: |
          # Ensure critical files exist
          required_files=(
            "app/bot.py"
            "app/ui.py"
            "compose/docker-compose.yml"
            ".github/workflows/deploy.yml"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found"
              exit 1
            fi
            echo "✓ $file exists"
          done

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4

      - name: Run security checks
        run: |
          # Check for common security issues
          echo "Checking for hardcoded secrets..."
          if grep -r "password\|secret\|key" app/ --exclude-dir=__pycache__ | grep -v "os.getenv\|os.environ" | grep -v "example\|test"; then
            echo "Warning: Potential hardcoded secrets found"
          else
            echo "✓ No hardcoded secrets found"
          fi
          
          echo "Checking for SQL injection vulnerabilities..."
          if grep -r "execute\|executemany" app/ --exclude-dir=__pycache__ | grep -v "cursor\|connection"; then
            echo "Warning: Potential SQL injection vulnerabilities found"
          else
            echo "✓ No SQL injection vulnerabilities found"
          fi

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4

      - name: Check file sizes
        run: |
          echo "Checking for large files..."
          find app/ -type f -size +1M -exec ls -lh {} \;
          
          echo "Checking for long files..."
          find app/ -name "*.py" -exec wc -l {} + | sort -nr | head -10

      - name: Validate imports
        run: |
          echo "Checking for unused imports..."
          python -c "
          import ast
          import os
          
          def check_file(filepath):
              try:
                  with open(filepath, 'r') as f:
                      tree = ast.parse(f.read())
                      imports = [node.names[0].name for node in ast.walk(tree) if isinstance(node, ast.Import)]
                      return imports
              except:
                  return []
          
          for root, dirs, files in os.walk('app'):
              for file in files:
                  if file.endswith('.py'):
                      filepath = os.path.join(root, file)
                      imports = check_file(filepath)
                      if imports:
                          print(f'{filepath}: {imports}')
          "
